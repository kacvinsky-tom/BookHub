// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Migrations.Sqlite.Migrations
{
    [DbContext(typeof(BookHubDbContext))]
    [Migration("20240116130400_translate_to_english")]
    partial class translate_to_english
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("DataAccessLayer.Entity.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            FirstName = "Stephen",
                            LastName = "King"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            FirstName = "J. K.",
                            LastName = "Rowling"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            FirstName = "George R. R.",
                            LastName = "Martin"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            FirstName = "Terry",
                            LastName = "Pratchett"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PublisherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "In a world supported on the back of a giant turtle (sex unknown), a gleeful, explosive, wickedly eccentric expedition sets out. There's an avaricious but inept wizard, a naive tourist whose luggage moves on hundreds of dear little legs, dragons who only exist if you believe in them, and of course THE EDGE of the planet...",
                            ISBN = "9780060855925",
                            IsDeleted = false,
                            Price = 399,
                            PublisherId = 1,
                            Quantity = 7,
                            ReleaseYear = 1993,
                            Title = "The Color of Magic"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Harry Potter has never even heard of Hogwarts when the letters start dropping on the doormat at number four, Privet Drive. Addressed in green ink on yellowish parchment with a purple seal, they are swiftly confiscated by his grisly aunt and uncle. Then, on Harry's eleventh birthday, a great beetle-eyed giant of a man called Rubeus Hagrid bursts in with some astonishing news: Harry Potter is a wizard, and he has a place at Hogwarts School of Witchcraft and Wizardry. An incredible adventure is about to begin!",
                            ISBN = "9781338878929",
                            IsDeleted = false,
                            Price = 399,
                            PublisherId = 2,
                            Quantity = 17,
                            ReleaseYear = 1997,
                            Title = "Harry Potter and the Sorcerer’s Stone"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Long ago, in a time forgotten, a preternatural event threw the seasons out of balance. In a land where summers can last decades and winters a lifetime, trouble is brewing. The cold is returning, and in the frozen wastes to the north of Winterfell, sinister forces are massing beyond the kingdom’s protective Wall. To the south, the king’s powers are failing—his most trusted adviser dead under mysterious circumstances and his enemies emerging from the shadows of the throne.",
                            ISBN = "9780553897845",
                            IsDeleted = false,
                            Price = 699,
                            PublisherId = 3,
                            Quantity = 15,
                            ReleaseYear = 1996,
                            Title = "A Game of Thrones"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Welcome to Derry, Maine ... It’s a small city, a place as hauntingly familiar as your own hometown. Only in Derry the haunting is real ... They were seven teenagers when they first stumbled upon the horror. Now they are grown-up men and women who have gone out into the big world to gain success and happiness. But none of them can withstand the force that has drawn them back to Derry to face the nightmare without an end, and the evil without a name.",
                            ISBN = "9780450411434",
                            IsDeleted = false,
                            Price = 799,
                            PublisherId = 1,
                            Quantity = 2,
                            ReleaseYear = 1986,
                            Title = "It"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ever since Harry Potter had come home for the summer, the Dursleys had been so mean and hideous that all Harry wanted was to get back to the Hogwarts School for Witchcraft and Wizardry. But just as he’s packing his bags, Harry receives a warning from a strange impish creature who says that if Harry returns to Hogwarts, disaster will strike.",
                            ISBN = "9781781100226",
                            IsDeleted = false,
                            Price = 399,
                            PublisherId = 2,
                            Quantity = 9,
                            ReleaseYear = 1998,
                            Title = "Harry Potter and the Chamber of Secrets"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Harry Potter, along with his best friends, Ron and Hermione, is about to start his third year at Hogwarts School of Witchcraft and Wizardry. Harry can't wait to get back to school after the summer holidays. (Who wouldn't if they lived with the horrible Dursleys?) But when Harry gets to Hogwarts, the atmosphere is tense. There's an escaped mass murderer on the loose, and the sinister prison guards of Azkaban have been called in to guard the school...",
                            ISBN = "9781484476253",
                            IsDeleted = false,
                            Price = 399,
                            PublisherId = 2,
                            Quantity = 11,
                            ReleaseYear = 1999,
                            Title = "Harry Potter and the Prisoner of Azkaban"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "It is the summer holidays and soon Harry Potter will be starting his fourth year at Hogwarts School of Witchcraft and Wizardry. Harry is counting the days: there are new spells to be learnt, more Quidditch to be played, and Hogwarts castle to continue exploring. But Harry needs to be careful - there are unexpected dangers lurking...",
                            ISBN = "9781781105672",
                            IsDeleted = false,
                            Price = 399,
                            PublisherId = 2,
                            Quantity = 13,
                            ReleaseYear = 2000,
                            Title = "Harry Potter and the Goblet of Fire"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Dark times have come to Hogwarts. After the Dementors' attack on his cousin Dudley, Harry Potter knows that Voldemort will stop at nothing to find him. There are many who deny the Dark Lord's return, but Harry is not alone: a secret order gathers at Grimmauld Place to fight against the Dark forces. Harry must allow Professor Snape to teach him how to protect himself from Voldemort's savage assaults on his mind. But they are growing stronger by the day and Harry is running out of time ...",
                            ISBN = "9781338878967",
                            IsDeleted = false,
                            Price = 399,
                            PublisherId = 2,
                            Quantity = 13,
                            ReleaseYear = 2000,
                            Title = "Harry Potter and the Order of the Phoenix"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "It is the middle of the summer, but there is an unseasonal mist pressing against the windowpanes. Harry Potter is waiting nervously in his bedroom at the Dursleys' house in Privet Drive for a visit from Professor Dumbledore himself. One of the last times he saw the Headmaster, he was in a fierce one-to-one duel with Lord Voldemort, and Harry can't quite believe that Professor Dumbledore will actually appear at the Dursleys' of all places. Why is the Professor coming to visit him now? What is it that cannot wait until Harry returns to Hogwarts in a few weeks' time? Harry's sixth year at Hogwarts has already got off to an unusual start, as the worlds of Muggle and magic start to intertwine...",
                            ISBN = "9781781100257",
                            IsDeleted = false,
                            Price = 399,
                            PublisherId = 2,
                            Quantity = 13,
                            ReleaseYear = 2005,
                            Title = "Harry Potter and the Half-Blood Prince"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Harry has been burdened with a dark, dangerous and seemingly impossible task: that of locating and destroying Voldemort's remaining Horcruxes. Never has Harry felt so alone, or faced a future so full of shadows. But Harry must somehow find within himself the strength to complete the task he has been given. He must leave the warmth, safety and companionship of The Burrow and follow without fear or hesitation the inexorable path laid out for him...",
                            ISBN = "9781781100264",
                            IsDeleted = false,
                            Price = 399,
                            PublisherId = 2,
                            Quantity = 13,
                            ReleaseYear = 2007,
                            Title = "Harry Potter and the Deathly Hallows"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "The eighth story, nineteen years later... It was always difficult being Harry Potter, and it isn't much easier now that he is an overworked employee of the Ministry of Magic, a husband, and a father of three school-age children. While Harry grapples with a past that refuses to stay where it belongs, his youngest son, Albus, must struggle with the weight of a family legacy he never wanted. As past and present fuse ominously, both father and son learn the uncomfortable truth: sometimes, darkness comes from unexpected places.",
                            ISBN = "9780751565362",
                            IsDeleted = false,
                            Price = 399,
                            PublisherId = 2,
                            Quantity = 13,
                            ReleaseYear = 2016,
                            Title = "Harry Potter and the Cursed Child"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.BookAuthor", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthor");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            BookId = 1
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 1
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 2
                        },
                        new
                        {
                            AuthorId = 4,
                            BookId = 2
                        },
                        new
                        {
                            AuthorId = 1,
                            BookId = 3
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 3
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 3
                        },
                        new
                        {
                            AuthorId = 4,
                            BookId = 4
                        },
                        new
                        {
                            AuthorId = 1,
                            BookId = 4
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 4
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 4
                        },
                        new
                        {
                            AuthorId = 4,
                            BookId = 5
                        },
                        new
                        {
                            AuthorId = 1,
                            BookId = 5
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 6
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 6
                        },
                        new
                        {
                            AuthorId = 4,
                            BookId = 7
                        },
                        new
                        {
                            AuthorId = 1,
                            BookId = 7
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 8
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 8
                        },
                        new
                        {
                            AuthorId = 4,
                            BookId = 9
                        },
                        new
                        {
                            AuthorId = 1,
                            BookId = 9
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 10
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 10
                        },
                        new
                        {
                            AuthorId = 4,
                            BookId = 11
                        },
                        new
                        {
                            AuthorId = 1,
                            BookId = 11
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.BookGenre", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenre");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            GenreId = 2,
                            IsPrimary = true
                        },
                        new
                        {
                            BookId = 1,
                            GenreId = 8,
                            IsPrimary = false
                        },
                        new
                        {
                            BookId = 2,
                            GenreId = 2,
                            IsPrimary = true
                        },
                        new
                        {
                            BookId = 2,
                            GenreId = 8,
                            IsPrimary = false
                        },
                        new
                        {
                            BookId = 3,
                            GenreId = 2,
                            IsPrimary = true
                        },
                        new
                        {
                            BookId = 3,
                            GenreId = 8,
                            IsPrimary = false
                        },
                        new
                        {
                            BookId = 3,
                            GenreId = 9,
                            IsPrimary = false
                        },
                        new
                        {
                            BookId = 4,
                            GenreId = 1,
                            IsPrimary = true
                        },
                        new
                        {
                            BookId = 4,
                            GenreId = 5,
                            IsPrimary = false
                        },
                        new
                        {
                            BookId = 4,
                            GenreId = 6,
                            IsPrimary = false
                        },
                        new
                        {
                            BookId = 4,
                            GenreId = 7,
                            IsPrimary = false
                        },
                        new
                        {
                            BookId = 5,
                            GenreId = 2,
                            IsPrimary = true
                        },
                        new
                        {
                            BookId = 5,
                            GenreId = 8,
                            IsPrimary = false
                        },
                        new
                        {
                            BookId = 6,
                            GenreId = 2,
                            IsPrimary = true
                        },
                        new
                        {
                            BookId = 6,
                            GenreId = 8,
                            IsPrimary = false
                        },
                        new
                        {
                            BookId = 7,
                            GenreId = 2,
                            IsPrimary = true
                        },
                        new
                        {
                            BookId = 7,
                            GenreId = 8,
                            IsPrimary = false
                        },
                        new
                        {
                            BookId = 8,
                            GenreId = 2,
                            IsPrimary = true
                        },
                        new
                        {
                            BookId = 8,
                            GenreId = 8,
                            IsPrimary = false
                        },
                        new
                        {
                            BookId = 9,
                            GenreId = 2,
                            IsPrimary = true
                        },
                        new
                        {
                            BookId = 9,
                            GenreId = 8,
                            IsPrimary = false
                        },
                        new
                        {
                            BookId = 10,
                            GenreId = 2,
                            IsPrimary = true
                        },
                        new
                        {
                            BookId = 10,
                            GenreId = 8,
                            IsPrimary = false
                        },
                        new
                        {
                            BookId = 11,
                            GenreId = 2,
                            IsPrimary = true
                        },
                        new
                        {
                            BookId = 11,
                            GenreId = 8,
                            IsPrimary = false
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 7,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Quantity = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Quantity = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            BookId = 2,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Quantity = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Action"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Humor and Comedy"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Historical novels"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Poetry"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.LocalIdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "86718895-f083-4ba8-8452-b7a4dc9ca99c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "cb9a0fb7-cd3e-498f-9b3e-ef3c9809708d",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.LocalIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0d8fb324-0996-465b-a7b1-aeaaf327e6a8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52f29df2-7b85-4f2d-b925-d861e125ad37",
                            Email = "john.doe@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@GMAIL.COM",
                            NormalizedUserName = "JOHN.DOE",
                            PasswordHash = "AQAAAAIAAYagAAAAENvJRIhW0HvRBoR6q6bmwLyxK6FOQd+ENX5fY0zExhUbq9q8JsCo8Gz0CxOH5O6xCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e34b0df2-8863-4466-ae5a-92686ddb52e4",
                            TwoFactorEnabled = false,
                            UserId = 1,
                            UserName = "john.doe"
                        },
                        new
                        {
                            Id = "551d86f0-c626-4dcf-bb4e-5fb3d05666cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ca69a27-f75d-4b17-89e1-e3a4c9da44d9",
                            Email = "jane.doe@gmai.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.DOE@GMAI.COM",
                            NormalizedUserName = "JANE.DOE",
                            PasswordHash = "AQAAAAIAAYagAAAAEAEyiPBPZx6HbMCOq2MmaqxdciGpSUbhoX01VRjU4hGjXRdOh3ou7Lg3QwhfcRkA3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4bac5dda-ba34-433d-9f68-0bd4abf58c1c",
                            TwoFactorEnabled = false,
                            UserId = 2,
                            UserName = "jane.doe"
                        },
                        new
                        {
                            Id = "996aa4ee-3b11-4e0f-b307-63bad603f850",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f350415d-efed-44bf-b92c-8e61f19b2469",
                            Email = "pavel.kraus@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PAVEL.KRAUS@GMAIL.COM",
                            NormalizedUserName = "PAVEL.KRAUS",
                            PasswordHash = "AQAAAAIAAYagAAAAEJa0udvFKhAgafmNjFzwoPR4YnCskaTHKP0CmpjH2h4BOOWz4kHEO3EF8JjGcLrUpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51f9b5e5-8609-4c04-9800-500cfee2f599",
                            TwoFactorEnabled = false,
                            UserId = 3,
                            UserName = "pavel.kraus"
                        },
                        new
                        {
                            Id = "caac826e-f9a3-4d6f-a521-e35be632b112",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdedf214-b574-4988-86c3-81a44173688a",
                            Email = "jarda@novak.cz",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JARDA@NOVAK.CZ",
                            NormalizedUserName = "JARDA.NOVAK",
                            PasswordHash = "AQAAAAIAAYagAAAAEJJZ5PWdW8XhdfuYU6UkWnkqBwOcsPHWIErN+0r6boR5bc2QMD750v7PB2cL4NLeIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe71b0a1-d7fa-4017-a0f1-95b23f05f8fe",
                            TwoFactorEnabled = false,
                            UserId = 4,
                            UserName = "jarda.novak"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VoucherUsedId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherUsedId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Status = 0,
                            TotalPrice = 798,
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            TotalPrice = 699,
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            TotalPrice = 399,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 10,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            ISBN = "9781781100264",
                            OrderId = 1,
                            Price = 399,
                            Quantity = 1,
                            Title = "Harry Potter and the Deathly Hallows"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 11,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            ISBN = "9780751565362",
                            OrderId = 1,
                            Price = 399,
                            Quantity = 1,
                            Title = "Harry Potter and the Cursed Child"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            ISBN = "9780553897845",
                            OrderId = 2,
                            Price = 699,
                            Quantity = 1,
                            Title = "A Game of Thrones"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 1,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            ISBN = "9780060855925",
                            OrderId = 3,
                            Price = 399,
                            Quantity = 1,
                            Title = "The Color of Magic"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ScribnerPublicity@SimonandSchuster.com",
                            Name = "Scribner",
                            State = "New York"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "help@pottermore.com",
                            Name = "Pottermore Publishing",
                            State = "London"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "BBDPublicity@randomhouse.com",
                            Name = "Bantam",
                            State = "New York"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            Comment = "Terry Pratchett's The Colour of Magic is a brilliant combination of fantasy and humour. Pratchett's ability to create fantastical worlds and humorously comment on our reality is simply incredible. This book is extremely entertaining and profound at the same time.",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Rating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            Comment = "When I first read The Colour of Magic, I was amazed by Pratchett's talent. His characters are vivid, the plot is original, and the humor is wonderful. Throughout the book, I laughed at every page.",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Rating = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 1,
                            Comment = "Mr. Pratchett created a very interesting place with the Discworld series, populated with very interesting and thoroughly human characters, with all the weaknesses of humans, whose activities are written about in a spirit of tremendous humor. I'm glad to have found the series and will enjoy reading more books in it.",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Rating = 4,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            BookId = 1,
                            Comment = "Terry Pratchett was a genius and The Colour of Magic proves it. His ability to combine fantasy with comedy while brilliantly commenting on various aspects of our society is amazing. This book is a gem and a must for all fans of fantasy and humor.",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Rating = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            BookId = 7,
                            Comment = "Harry Potter and the Goblet of Fire is a turning point in the series. Rowling's ability to develop the world of wizards and characters is amazing. This book is full of suspense, adventure and emotion. I couldn't tear myself away from it.",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Rating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            BookId = 7,
                            Comment = "Harry Potter and the Goblet of Fire is not only darker than the previous books, but also far more complex. Rowling shows here that her story is not just for children. The plot is suspenseful and the characters go through important changes.",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Rating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            BookId = 7,
                            Comment = "Harry Potter's fourth adventures in the Goblet of Fire are fantastic. This book features incredible dedication and dueling at the Tournament of Three Spells. Rowling's ability to create a complex and engaging story remains unsurpassed.",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Rating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            BookId = 7,
                            Comment = "Harry Potter and the Goblet of Fire is further proof of Rowling's brilliant ability to write for a variety of ages. This book is engaging, full of mystery and emotion, and proves why the Harry Potter series is so popular around the world.",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Rating = 5,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "john.doe@gmail.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "752 685 143",
                            Username = "john.doe"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "jane.doe@gmai.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            PhoneNumber = "746 692 352",
                            Username = "jane.doe"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "pavel.kraus@gmail.com",
                            FirstName = "Pavel",
                            LastName = "Kraus",
                            PhoneNumber = "748 242 562",
                            Username = "pavel.kraus"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "jarda@novak.cz",
                            FirstName = "Jarda",
                            LastName = "Novák",
                            PhoneNumber = "742 942 934",
                            Username = "jarda.novak"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Discount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "CHRISTMAS",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Discount = 10,
                            ExpirationDate = new DateTime(2023, 12, 24, 12, 0, 0, 0, DateTimeKind.Utc),
                            Quantity = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = "SALE10",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Discount = 100,
                            ExpirationDate = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Quantity = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Code = "WINTERSALE",
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Discount = 20,
                            ExpirationDate = new DateTime(2024, 1, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            Quantity = 0,
                            Type = 0
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.WishList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WishLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "My wish list",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "The Remaining Harry Potter Books",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entity.WishListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("WishListId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("WishListId");

                    b.ToTable("WishListItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            WishListId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 3,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            WishListId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 8,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            WishListId = 2
                        },
                        new
                        {
                            Id = 4,
                            BookId = 9,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            WishListId = 2
                        },
                        new
                        {
                            Id = 5,
                            BookId = 10,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            WishListId = 2
                        },
                        new
                        {
                            Id = 6,
                            BookId = 11,
                            CreatedAt = new DateTime(2023, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            WishListId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0d8fb324-0996-465b-a7b1-aeaaf327e6a8",
                            RoleId = "86718895-f083-4ba8-8452-b7a4dc9ca99c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Book", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.BookAuthor", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.BookGenre", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.CartItem", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Book", "Book")
                        .WithMany("CartItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.LocalIdentityUser", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Order", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.Voucher", "VoucherUsed")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherUsedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");

                    b.Navigation("VoucherUsed");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.OrderItem", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Book", "Book")
                        .WithMany("OrderItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccessLayer.Entity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Review", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.WishList", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.User", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.WishListItem", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Book", "Book")
                        .WithMany("WishListItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.WishList", "WishList")
                        .WithMany("WishListItems")
                        .HasForeignKey("WishListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.LocalIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.LocalIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.LocalIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.LocalIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.LocalIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.LocalIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookGenres");

                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");

                    b.Navigation("WishListItems");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.User", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Voucher", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.WishList", b =>
                {
                    b.Navigation("WishListItems");
                });
#pragma warning restore 612, 618
        }
    }
}
